DFA {
    states: q0, q1,  q2;
    alphabet: 1, 0;
    transitions:
        q0 0 -> q0;
        q0 1 -> q1;
        q1 0 -> q1;
        q1 1 -> q2;
        q2 0 -> q2;
        q2 1 -> q2;
    initial: q0;
    final: q2;
    computations:  11111, 01, 101, 110, 111, 0011, 0101;
}
NFA {
    states: q0, q1,  q2;
    alphabet: 1, 0;
    transitions:
        q0 0 -> {q0,q1};
        q0 1 -> q1;
        q1 1 -> q2;
        q2 0 -> q2;
    initial: q0;
    final: q2;
    computations:  1111111, 01, 11;
}
ε-NFA {
    states: p0, p1;
    alphabet: a;
    transitions:
        p0 ε -> p1;
        p0 a -> p0;
    initial: p0;
    final: p1;
    computations: b, a, aa;
}
PDA {
    states: q0, q1;
    alphabet: a, b;
    stack alphabet: Z, X;
    transitions:
            q0, a, Z -> q0, XZ;
            q0, a, X -> q0, XX;
            q0, b, X -> q1, ε;
            q1, b, X -> q1, ε;
            q1, ε, Z -> q1, ε;
    initial state: q0;
    initial stack: Z;
    computations: aabb, aab, bbaa, ab, bab, aba, aaaabbbb;
}
CFG {
    variables: S, A, B;
    terminals: 0, 1, 2;
    start: S;

    productions:
        S -> A B;
        A -> 0 | ε;
        B -> 1 2 | 1 | 2 | ε;
    derivations: 012, 000 ;
}
TuringMachine {
    states : q0, q1, q2, q3, q4, qy, qn ;
    input alphabet : 0, 1 ;
    tape alphabet : 0, 1, X, Y, B ;
    initial state : q0 ;
    blank symbol : B ;
    final : qy, qn ;

    transitions :
        q0,0 -> q0,X,LEFT ;
        q0,1 -> q2,Y,RIGHT ;
        q0,B -> qy,B,RIGHT ;

        q1,0 -> q1,0,RIGHT ;
        q1,1 -> q1,1,RIGHT ;
        q1,B -> q3,B,RIGHT ;

        q2,0 -> q2,0,RIGHT ;
        q2,1 -> q2,1,RIGHT ;
        q2,B -> q3,B,LEFT ;

        q3,0 -> q4,0,RIGHT ;
        q3,1 -> q4,Y,LEFT ;
        q3,X -> qy,X,RIGHT ;
        q3,Y -> qy,Y,RIGHT ;

        q4,0 -> q3,0,LEFT ;
        q4,1 -> q4,1,LEFT ;
        q4,X -> q0,X,RIGHT ;
        q4,Y -> q0,Y,RIGHT ;

    computations : 010, 010, 0110, 1001, 101, 0, 1, 11111;
}
